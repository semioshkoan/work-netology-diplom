---
- name: Wait for unattended upgrades to finish
  shell: |
    while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
      echo "Waiting for unattended-upgrades to release apt lock..."
      sleep 10
    done
  args:
    executable: /bin/bash
  # Ограничиваем время ожидания, чтобы избежать бесконечного цикла
  timeout: 600 # 10 минут
  ignore_errors: false

- name: Install required system packages
  apt:
    name:
      - wget
      - gnupg
      - ca-certificates
    state: present
    update_cache: yes

- name: Add Zabbix repository
  apt:
    deb: "{{ zabbix_repo_url }}"

- name: Update apt cache after adding Zabbix repo
  apt:
    update_cache: yes

- name: Install MariaDB
  apt:
    name: "{{ mariadb_packages }}"
    state: present

- name: Start and enable MariaDB service
  systemd:
    name: mariadb
    state: started
    enabled: yes

- name: Wait for MariaDB to start
  wait_for:
    path: /run/mysqld/mysqld.sock
    timeout: 30

- name: Set initial root password
  mysql_user:
    name: root
    password: "{{ zabbix_db_password }}"
    check_implicit_admin: yes
    login_unix_socket: /run/mysqld/mysqld.sock
    state: present
  register: root_password_set
  ignore_errors: true

- name: Configure root access for all hosts
  mysql_user:
    name: root
    host: "{{ item }}"
    password: "{{ zabbix_db_password }}"
    login_user: root
    login_password: "{{ zabbix_db_password }}"
    state: present
  loop:
    - "localhost"
    - "127.0.0.1"
    - "::1"
  when: root_password_set is succeeded
  ignore_errors: true

- name: Remove anonymous users
  mysql_user:
    name: ""
    host_all: yes
    state: absent
    login_user: root
    login_password: "{{ zabbix_db_password }}"
  ignore_errors: true

- name: Remove test database
  mysql_db:
    name: "test"
    state: absent
    login_user: root
    login_password: "{{ zabbix_db_password }}"
  ignore_errors: true

- name: Reload privileges
  mysql_query:
    query: "FLUSH PRIVILEGES"
    login_user: root
    login_password: "{{ zabbix_db_password }}"
  ignore_errors: true

- name: Create Zabbix database
  mysql_db:
    name: "{{ zabbix_db_name }}"
    encoding: utf8mb4
    collation: utf8mb4_bin
    state: present
    login_user: root
    login_password: "{{ zabbix_db_password }}"

- name: Create Zabbix database user
  mysql_user:
    name: "{{ zabbix_db_user }}"
    password: "{{ zabbix_db_password }}"
    priv: "{{ zabbix_db_name }}.*:ALL"
    host: localhost
    state: present
    login_user: root
    login_password: "{{ zabbix_db_password }}"

- name: Set log_bin_trust_function_creators to 1
  mysql_variables:
    variable: log_bin_trust_function_creators
    value: 1
    login_user: root
    login_password: "{{ zabbix_db_password }}"

- name: Import Zabbix database schema
  shell: >
    zcat /usr/share/zabbix-sql-scripts/mysql/server.sql.gz |
    mysql --default-character-set=utf8mb4 -u {{ zabbix_db_user }} -p{{ zabbix_db_password }} {{ zabbix_db_name }}
  args:
    executable: /bin/bash
  environment:
    MYSQL_PWD: "{{ zabbix_db_password }}"

- name: Set log_bin_trust_function_creators to 0
  mysql_variables:
    variable: log_bin_trust_function_creators
    value: 0
    login_user: root
    login_password: "{{ zabbix_db_password }}"

- name: Install Zabbix packages
  apt:
    name: "{{ zabbix_packages }}"
    state: present

- name: Configure Zabbix Server database connection
  lineinfile:
    path: /etc/zabbix/zabbix_server.conf
    regexp: "^#?\\s*{{ item.key }}\\s*="
    line: "{{ item.key }}={{ item.value }}"
    backup: yes
  loop:
    - { key: "DBHost", value: "localhost" }
    - { key: "DBName", value: "{{ zabbix_db_name }}" }
    - { key: "DBUser", value: "{{ zabbix_db_user }}" }
    - { key: "DBPassword", value: "{{ zabbix_db_password }}" }
    - { key: "Timeout", value: "30" }
  notify: restart zabbix-server

- name: Install PHP packages
  apt:
    name: "{{ php_packages }}"
    state: present

- name: Configure PHP settings
  lineinfile:
    path: "/etc/php/{{ php_version }}/fpm/php.ini"
    regexp: "^;?{{ item.key }}"
    line: "{{ item.key }} = {{ item.value }}"
  loop:
    - { key: "date.timezone", value: "Europe/Moscow" }
    - { key: "max_execution_time", value: "300" }
    - { key: "memory_limit", value: "256M" }
    - { key: "post_max_size", value: "32M" }
    - { key: "upload_max_filesize", value: "16M" }
    - { key: "max_input_time", value: "300" }
  notify: restart php-fpm

- name: Remove default PHP-FPM pool if exists
  file:
    path: "/etc/php/{{ php_version }}/fpm/pool.d/www.conf"
    state: absent
  notify: restart php-fpm

- name: Deploy Zabbix PHP-FPM configuration
  template:
    src: zabbix_php_fpm.conf.j2
    dest: "/etc/zabbix/php-fpm.conf"
    owner: root
    group: root
    mode: '0644'
  notify: restart php-fpm

- name: Create Zabbix log directory
  file:
    path: /var/log/zabbix
    state: directory
    owner: zabbix
    group: zabbix
    mode: '0755'

- name: Configure Nginx for Zabbix
  template:
    src: zabbix_nginx.conf.j2
    dest: /etc/nginx/conf.d/zabbix.conf
    owner: root
    group: root
    mode: '0644'
  notify: restart nginx

- name: Enable Zabbix services
  systemd:
    name: "{{ item }}"
    enabled: yes
    state: started
  loop:
    - zabbix-server
    - zabbix-agent
    - mariadb
    - nginx
    - "php{{ php_version }}-fpm"
  ignore_errors: true

- name: Verify Zabbix services are running
  command: systemctl is-active {{ item }}
  loop:
    - zabbix-server
    - nginx
    - "php{{ php_version }}-fpm"
  register: service_status
  ignore_errors: true

- name: Final verification of Zabbix database
  command: >
    mysql -u{{ zabbix_db_user }} -p{{ zabbix_db_password }} {{ zabbix_db_name }}
    -e "SELECT * FROM dbversion LIMIT 1;"
  register: db_check
  ignore_errors: true
  changed_when: false

- name: Re-import Zabbix database schema if verification failed
  shell: >
    zcat /usr/share/zabbix-sql-scripts/mysql/server.sql.gz |
    mysql --default-character-set=utf8mb4 -u {{ zabbix_db_user }} -p{{ zabbix_db_password }} {{ zabbix_db_name }}
  args:
    executable: /bin/bash
  when: db_check.rc != 0
  environment:
    MYSQL_PWD: "{{ zabbix_db_password }}"

- name: Final verification after re-import
  command: >
    mysql -u{{ zabbix_db_user }} -p{{ zabbix_db_password }} {{ zabbix_db_name }}
    -e "SELECT * FROM dbversion LIMIT 1;"
  register: final_db_check
  changed_when: false
  failed_when: final_db_check.rc != 0  

- name: Debug service status
  debug:
    var: service_status